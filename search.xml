<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在gin中使用jwt鉴权</title>
      <link href="/2023/02/02/be/go/jwt/"/>
      <url>/2023/02/02/be/go/jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="jwt是什么"><a href="#jwt是什么" class="headerlink" title="jwt是什么"></a>jwt是什么</h2><p>jwt全称 JSON Web Token，是一种跨域认证的解决方案。</p><p>jwt由三部分组成，中间使用<code>.</code>进行分割，格式如下：</p><blockquote><p>header.payload.signature</p></blockquote><ul><li>header: 是一个JSON对象，包含如下内容<pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "typ": "JWT",//默认为JWT  "alg": "HS256"//支持多种加密算法}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>payload: 也是一个JSON对象，用来存放实际所需的数据。包括如下JWT标准提供的7种可选数据和自定义数据</li></ul><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>iss</td><td>签发者</td></tr><tr><td>sub</td><td>主题,用于鉴别一个用户</td></tr><tr><td>exp</td><td>过期时间</td></tr><tr><td>aud</td><td>受众</td></tr><tr><td>iat</td><td>签发时间</td></tr><tr><td>nbf</td><td>生效时间</td></tr><tr><td>jti</td><td>jwt ID</td></tr></tbody></table><ul><li>signature: 签名，将header和payload进行Base64URL编码后，再用指定密钥和header中的加密算法进行加密得到</li></ul><h3 id="jwt的特点"><a href="#jwt的特点" class="headerlink" title="jwt的特点"></a>jwt的特点</h3><p>相较于传统的Cookie和Session的认证方式，jwt不需要像Session那样在服务器上存储信息，也没有Cookie的大小限制，更加灵活，也更适用于分布式系统。</p><h2 id="在gin中使用jwt"><a href="#在gin中使用jwt" class="headerlink" title="在gin中使用jwt"></a>在gin中使用jwt</h2><p>使用<code>jwt-go</code>包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/golang-jwt/jwt/v4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"github.com/golang-jwt/jwt/v4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="token生成函数和解析函数"><a href="#token生成函数和解析函数" class="headerlink" title="token生成函数和解析函数"></a>token生成函数和解析函数</h3><p>在样例中，我们在payload中存储用户id，读者可根据自己需要添加任意信息。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> util<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"errors"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token string">"log"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token comment">// MyClaims 自定义的payload</span><span class="token keyword">type</span> MyClaims <span class="token keyword">struct</span> <span class="token punctuation">{</span>jwt<span class="token punctuation">.</span>RegisteredClaims        <span class="token comment">// 内置的payload字段</span>UserID               <span class="token builtin">string</span> <span class="token string">`json:"user_id"`</span> <span class="token comment">// 自定义的payload字段</span><span class="token punctuation">}</span><span class="token keyword">type</span> JWT <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"qwouidfoqiwr23fioqw"</span><span class="token punctuation">)</span> <span class="token comment">// 用于签名的密钥</span><span class="token keyword">func</span> <span class="token punctuation">(</span>j <span class="token operator">*</span>JWT<span class="token punctuation">)</span> <span class="token function">GenerateToken</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">,</span> ttl <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 创建一个新的token</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> <span class="token operator">&amp;</span>MyClaims<span class="token punctuation">{</span>UserID<span class="token punctuation">:</span> msg<span class="token punctuation">,</span>RegisteredClaims<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span>RegisteredClaims<span class="token punctuation">{</span>ExpiresAt<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span>ttl<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 过期时间，ttl天后过期</span>IssuedAt<span class="token punctuation">:</span>  jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>                                        <span class="token comment">// 签发时间</span>NotBefore<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>                                        <span class="token comment">// 生效时间</span>Issuer<span class="token punctuation">:</span>    <span class="token string">"tiktok-lite"</span><span class="token punctuation">,</span>                                                  <span class="token comment">// 签发人</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>tokenString<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// 签名, 返回token字符串</span><span class="token keyword">return</span> tokenString<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>j <span class="token operator">*</span>JWT<span class="token punctuation">)</span> <span class="token function">ParseToken</span><span class="token punctuation">(</span>tokenString <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>token<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseWithClaims</span><span class="token punctuation">(</span>tokenString<span class="token punctuation">,</span> <span class="token operator">&amp;</span>MyClaims<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>token <span class="token operator">*</span>jwt<span class="token punctuation">.</span>Token<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> key<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"invalid token"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>claims<span class="token punctuation">,</span> ok <span class="token operator">:=</span> token<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>MyClaims<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">||</span> <span class="token operator">!</span>token<span class="token punctuation">.</span>Valid <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"invalid token"</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"invalid token"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> claims<span class="token punctuation">.</span>UserID<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="gin中间件"><a href="#gin中间件" class="headerlink" title="gin中间件"></a>gin中间件</h3><p>构造一个jwt鉴权中间件，在需要用户鉴权的路由中使用。</p><p>一般token信息会放在请求的header的<code>Authorization</code>字段中，并以<code>Bearer +token字符串</code>的方式发送。本文采用URL参数的方式发送token，例如：<a href="http://domain.com/user/info?user_id=xxxxx&amp;token=xxxxxxx">http://domain.com/user/info?user_id=xxxxx&amp;token=xxxxxxx</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">JWTAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>userId <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span>token <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token keyword">if</span> userId <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> token <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>controller<span class="token punctuation">.</span>UserInfoRes<span class="token punctuation">{</span>Code<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>Msg<span class="token punctuation">:</span>  <span class="token string">"缺失参数"</span><span class="token punctuation">,</span>User<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>jwt <span class="token operator">:=</span> util<span class="token punctuation">.</span>JWT<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 上文实现的JWT</span>claims<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> claims <span class="token operator">!=</span> userId <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>controller<span class="token punctuation">.</span>UserInfoRes<span class="token punctuation">{</span>Code<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>Msg<span class="token punctuation">:</span>  <span class="token string">"token验证失败"</span><span class="token punctuation">,</span>User<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="login时生成token"><a href="#login时生成token" class="headerlink" title="login时生成token"></a>login时生成token</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Login</span><span class="token punctuation">(</span>username <span class="token builtin">string</span><span class="token punctuation">,</span> password <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>UserToken<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span>jwt <span class="token operator">:=</span> util<span class="token punctuation">.</span>JWT<span class="token punctuation">{</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">GenerateToken</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>UserToken<span class="token punctuation">{</span><span class="token operator">...</span>Token<span class="token punctuation">:</span> token<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">user <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">,</span> middleware<span class="token punctuation">.</span><span class="token function">JWTAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    userID <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span>    userInfo <span class="token operator">:=</span> controller<span class="token punctuation">.</span><span class="token function">GetUserInfo</span><span class="token punctuation">(</span>userID<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gin </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

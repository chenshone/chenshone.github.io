<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CMU15445-存储引擎</title>
      <link href="/2023/04/07/base/cmu15445/database-storage-1/"/>
      <url>/2023/04/07/base/cmu15445/database-storage-1/</url>
      
        <content type="html"><![CDATA[<h2 id="基于磁盘的体系结构"><a href="#基于磁盘的体系结构" class="headerlink" title="基于磁盘的体系结构"></a>基于磁盘的体系结构</h2><p>数据库中的数据主要存储在磁盘（non-volatile disk，非易失的）中，DBMS主要负责数据在磁盘和内存（non-volatile and volatile storage）中来回移动。</p><p>如下图所示，存储体系结构越往上速度越快、容量越小、价格越贵。</p><p>内存及往上存储结构支持<strong>随机访问</strong>，访问地址最小单位是<strong>字节</strong>，也就说可以读取单个字节数据；ssd及以下存储结构<strong>顺序访问</strong>，访问地址最小单位是<strong>块</strong>，存取最小也是一块，比如只想存1B的数据，也需要占一块的空间。</p><p><img src="https://fastly.jsdelivr.net/gh/chenshone/myPictureHost@main/learning-notes/image-20230407163424707.png" alt="存储体系结构"></p><h3 id="顺序访问与随机访问"><a href="#顺序访问与随机访问" class="headerlink" title="顺序访问与随机访问"></a>顺序访问与随机访问</h3><p>通常情况下，在磁盘上，随机访问都比顺序访问要慢的多。因此DBMS希望最大化顺序访问。</p><p>也就是说，在写入数据时，应该尽量减少随机写，让数据存储在连续块（block）中。</p><p>同时分配多个页面（page）称为区间（extent）。</p><h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><ol><li>应当允许DBMS管理超过内存大小的数据库规模</li><li>对磁盘的读/写是昂贵的，所以必须小心管理，以避免大的停顿和性能下降。</li><li>磁盘上的随机访问通常比顺序访问慢得多，所以DBMS希望最大限度地提高顺序访问。</li></ol><h2 id="面向磁盘的DBMS设计"><a href="#面向磁盘的DBMS设计" class="headerlink" title="面向磁盘的DBMS设计"></a>面向磁盘的DBMS设计</h2><img src="https://cdn.jsdelivr.net/gh/chenshone/myPictureHost@main/learning-notes/image-20230414143832682.png" alt="image-20230414143832682" style="zoom: 33%;"><p>如上图所示，在磁盘中，db里的数据按页存储，有一个directory来标记不同的页分别在哪里，每个页中都有一个header来存放该页的元数据。</p><p>上图的例子是想要拿到page#2，先从disk中将directory读到内存的buffer池中，然后根据directory找到page#2，读到buffer池中，执行器疫情再分析page#2。</p><h3 id="DBMS应该自己控制存取而不是交给OS"><a href="#DBMS应该自己控制存取而不是交给OS" class="headerlink" title="DBMS应该自己控制存取而不是交给OS"></a>DBMS应该自己控制存取而不是交给OS</h3><p>DBMS（几乎）总是想自己控制事情，并能比操作系统做得更好。</p><ol><li>以正确的顺序将脏页冲到磁盘。</li><li>专门的预取。</li><li>缓冲区替换策略。</li><li>线程/进程调度。</li></ol><p>OS并不知道DBMS对数据的操作具体是如何的，遇到缺页的情况，盲目的替换，会导致极差的性能。因此DBMS应该自主控制。</p><h2 id="数据库存储需要考虑的两大问题"><a href="#数据库存储需要考虑的两大问题" class="headerlink" title="数据库存储需要考虑的两大问题"></a>数据库存储需要考虑的两大问题</h2><h3 id="1-DBMS如何在磁盘上的文件中表示数据库"><a href="#1-DBMS如何在磁盘上的文件中表示数据库" class="headerlink" title="1. DBMS如何在磁盘上的文件中表示数据库"></a>1. DBMS如何在磁盘上的文件中表示数据库</h3><h4 id="文件存储-file-storage"><a href="#文件存储-file-storage" class="headerlink" title="文件存储 (file storage)"></a>文件存储 (file storage)</h4><p>DBMS将数据库作为一个或多个文件存储在磁盘上，通常是一种专有格式。操作系统对这些文件的内容一无所知。</p><p>一个页面是一个固定大小的数据块。</p><ul><li>它可以包含图元、元数据、索引、日志记录…。</li><li>大多数系统不混合页面类型。</li><li>有些系统要求一个页面是自解释的，也就说页面中包含描述该页面的信息。</li></ul><p>每个页面都有一个唯一的标识符。DBMS使用一个中介层将页面ID映射到物理位置。</p><p>在DBMS中的 “页”有三种不同的概念：</p><ul><li>硬件页（通常为4KB）</li><li>操作系统页(通常为4KB)</li><li>数据库页(512B-16KB)</li></ul><p>一个硬件页是存储设备可以容纳的最大数据块的数据块，存储设备可以保证故障安全写入的最大数据块。</p><p><strong>堆文件</strong>是一个无序的页面集合，其tuples是以随机顺序存储的。</p><ul><li>创建/获取/写入/删除页面</li><li>还必须支持对所有页面进行迭代。</li></ul><p>有两种方法来表示堆文件：</p><ul><li><p>链表</p><img src="https://cdn.jsdelivr.net/gh/chenshone/myPictureHost@main/learning-notes/image-20230414155819030.png" alt="image-20230414155819030" style="zoom:50%;"></li><li><p>页目录</p><img src="https://cdn.jsdelivr.net/gh/chenshone/myPictureHost@main/learning-notes/image-20230414155954329.png" alt="image-20230414155954329" style="zoom:50%;"></li></ul><h4 id="页布局-page-layout"><a href="#页布局-page-layout" class="headerlink" title="页布局 (page layout)"></a>页布局 (page layout)</h4><p><img src="https://cdn.jsdelivr.net/gh/chenshone/myPictureHost@main/learning-notes/image-20230414160241162.png" alt="image-20230414160241162"></p><p>对于任何页面存储架构，我们需要决定如何组织页面内的数据。</p><blockquote><p>  我们假设只是在存储tuple。</p></blockquote><p>有两种方法：</p><ul><li><p>面向元组（常用）</p><p><img src="https://cdn.jsdelivr.net/gh/chenshone/myPictureHost@main/learning-notes/image-20230414161233622.png" alt="image-20230414161233622"></p><p>slot从头往后存，实际数据从尾往前存。当删除/新增一个元组时，只需要修改对于的slot指针即可。此外，对于存储碎片问题，可以将存储的tuple迁移到前面去，接着改变相应的slot指针即可，如下图所示。</p><img src="https://cdn.jsdelivr.net/gh/chenshone/myPictureHost@main/learning-notes/image-20230414161918255.png" alt="image-20230414161918255" style="zoom:33%;"><img src="https://cdn.jsdelivr.net/gh/chenshone/myPictureHost@main/learning-notes/image-20230414161947887.png" alt="image-20230414161947887" style="zoom:33%;"><p>DBMS需要一种方法来跟踪单个tuple。<br>每个元组都被分配一个唯一的记录标识符。</p><ul><li>最常见的是：page_id offset/slot</li><li>也可以包含文件位置信息。</li></ul></li><li><p>日志结构化</p></li></ul><h4 id="元组布局-tuple-layout"><a href="#元组布局-tuple-layout" class="headerlink" title="元组布局 (tuple layout)"></a>元组布局 (tuple layout)</h4><p>tuple本质上是一组byte序列，DBMS的职责就是将这些bytes解释成属性类型和值。</p><p><img src="https://cdn.jsdelivr.net/gh/chenshone/myPictureHost@main/learning-notes/image-20230414163138674.png" alt="image-20230414163138674"></p><h3 id="2-DBMS是如何管理其内存并从磁盘上来回移动数据"><a href="#2-DBMS是如何管理其内存并从磁盘上来回移动数据" class="headerlink" title="2. DBMS是如何管理其内存并从磁盘上来回移动数据"></a>2. DBMS是如何管理其内存并从磁盘上来回移动数据</h3>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmu15445 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于docker搭建hadoop平台</title>
      <link href="/2023/04/01/util/docker-deploy-hadoop/"/>
      <url>/2023/04/01/util/docker-deploy-hadoop/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="构建虚拟网络"><a href="#构建虚拟网络" class="headerlink" title="构建虚拟网络"></a>构建虚拟网络</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network create <span class="token parameter variable">--driver</span><span class="token operator">=</span>bridge hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否创建成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network <span class="token function">ls</span>NETWORK ID     NAME      DRIVER    SCOPE87bf5f082af9   bridge    bridge    <span class="token builtin class-name">local</span>65e355efabcd   hadoop    bridge    <span class="token builtin class-name">local</span>5e7b0f6300d1   <span class="token function">host</span>      <span class="token function">host</span>      <span class="token builtin class-name">local</span>ec6c87608c88   none      null      <span class="token builtin class-name">local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到列表中有hadoop即代表创建虚拟网络成功</p><h3 id="安装ubuntu"><a href="#安装ubuntu" class="headerlink" title="安装ubuntu"></a>安装ubuntu</h3><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull ubuntu:16.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否拉取成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">docker</span> image <span class="token function">ls</span>REPOSITORY   TAG       IMAGE ID       CREATED         SIZEubuntu       <span class="token number">16.04</span>     b6f507652425   <span class="token number">13</span> months ago   135MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看到列表中有ubuntu即代表拉取成功</p><h4 id="构建容器"><a href="#构建容器" class="headerlink" title="构建容器"></a>构建容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> ubuntu:16.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否构建成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS                   PORTS     NAMES1cfae773d0b7   ubuntu:16.04   <span class="token string">"/bin/bash"</span>              <span class="token number">4</span> seconds ago   Up <span class="token number">3</span> seconds                       hardcore_nobel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到容器已经构建且处于运行状态</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>首先进入刚刚创建的ubuntu容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 1cfa /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改apt源"><a href="#修改apt源" class="headerlink" title="修改apt源"></a>修改apt源</h4><p>因为众所周知的原因，需要将apt源替换成国内镜像</p><p>首先先将原来的源备份一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入镜像源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"deb http://mirrors.aliyun.com/ubuntu/ xenial main&gt; deb-src http://mirrors.aliyun.com/ubuntu/ xenial main&gt;&gt; deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main&gt; deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main&gt;&gt; deb http://mirrors.aliyun.com/ubuntu/ xenial universe&gt; deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe&gt; deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe&gt; deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe&gt;&gt; deb http://mirrors.aliyun.com/ubuntu/ xenial-security main&gt; deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main&gt; deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe&gt; deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe"</span> <span class="token operator">&gt;</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要写入的内容如下，复制粘贴即可</p><pre class="line-numbers language-none"><code class="language-none">deb http://mirrors.aliyun.com/ubuntu/ xenial maindeb-src http://mirrors.aliyun.com/ubuntu/ xenial maindeb http://mirrors.aliyun.com/ubuntu/ xenial-updates maindeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates maindeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb-src http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security maindeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security maindeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，输入<code>apt update</code>来更新一下即可</p><h4 id="安装jdk与scala"><a href="#安装jdk与scala" class="headerlink" title="安装jdk与scala"></a>安装jdk与scala</h4><h5 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@1cfae773d0b7:/<span class="token comment"># java -version</span>openjdk version <span class="token string">"1.8.0_292"</span>OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_292-8u292-b10-0ubuntu1~16.04.1-b10<span class="token punctuation">)</span>OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.292</span>-b10, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="scala"><a href="#scala" class="headerlink" title="scala"></a>scala</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> scala<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@1cfae773d0b7:/<span class="token comment"># scala</span>Welcome to Scala version <span class="token number">2.11</span>.6 <span class="token punctuation">(</span>OpenJDK <span class="token number">64</span>-Bit Server VM, Java <span class="token number">1.8</span>.0_292<span class="token punctuation">)</span>.Type <span class="token keyword">in</span> expressions to have them evaluated.Type :help <span class="token keyword">for</span> <span class="token function">more</span> information.scala<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入<code>:quit</code>即可退出scala交互</p><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="net-tools"><a href="#net-tools" class="headerlink" title="net-tools"></a>net-tools</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><p>安装ssh服务端与客户端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> openssh-client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动ssh服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@1cfae773d0b7:~<span class="token comment"># service ssh start</span> * Starting OpenBSD Secure Shell server sshd   <span class="token punctuation">..</span>.done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将该命令写入到.bashrc中方便自启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"service ssh start"</span> <span class="token operator">&gt;&gt;</span> .bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="配置免密登录"><a href="#配置免密登录" class="headerlink" title="配置免密登录"></a>配置免密登录</h5><ol><li><p>生成密钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后一路回车即可</p></li><li><p>将公钥追加到 authorized_keys 文件中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> .ssh/id_rsa.pub <span class="token operator">&gt;&gt;</span> .ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>测试一下能否登录本机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token number">127.0</span>.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初次登录会出现如下提示</p><p><code>Are you sure you want to continue connecting (yes/no)?</code></p><p>输入<code>yes</code>即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Welcome to Ubuntu <span class="token number">16.04</span>.7 LTS <span class="token punctuation">(</span>GNU/Linux <span class="token number">5.10</span>.124-linuxkit x86_64<span class="token punctuation">)</span> * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantageLast login: Mon Sep <span class="token number">26</span> 04:22:06 <span class="token number">2022</span> from <span class="token number">127.0</span>.0.1 * Starting OpenBSD Secure Shell server sshd   <span class="token punctuation">..</span>.done.root@1cfae773d0b7:~<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现如上信息即表示成功登录本机（127.0.0.1）</p><p>输入<code>exit</code>即可退出登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@1cfae773d0b7:~<span class="token comment"># exit</span><span class="token builtin class-name">logout</span>Connection to <span class="token number">127.0</span>.0.1 closed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="hadoop安装与配置"><a href="#hadoop安装与配置" class="headerlink" title="hadoop安装与配置"></a>hadoop安装与配置</h2><p>首先，先进入用户根目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后下载hadoop</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.2.3/hadoop-3.2.3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压到<code>/usr/local/</code>目录并重命名文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@1cfae773d0b7:~<span class="token comment">#tar -zxvf hadoop-3.2.0.tar.gz -C /usr/local/</span>root@1cfae773d0b7:~<span class="token comment">#cd /usr/local</span>root@1cfae773d0b7:/usr/local<span class="token comment"># mv hadoop-3.2.3 hadoop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将要配置的环境变量添加到 <code>/etc/profile</code>文件中</p><blockquote><p>  使用<code>update-alternatives --config java</code>命令查看jdk的安装目录</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@1cfae773d0b7:/usr/local<span class="token comment"># update-alternatives --config java</span>There is only one alternative <span class="token keyword">in</span> <span class="token function">link</span> group <span class="token function">java</span> <span class="token punctuation">(</span>providing /usr/bin/java<span class="token punctuation">)</span>: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/javaNothing to configure.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>用vim打开<code>/etc/profile</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将如下内容写入到文件末尾</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#java</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-8-openjdk-amd64<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token environment constant">$PATH</span><span class="token comment">#hadoop</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/usr/local/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_COMMON_HOME</span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HDFS_HOME</span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_MAPRED_HOME</span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_YARN_HOME</span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_INSTALL</span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_COMMON_LIB_NATIVE_DIR</span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/lib/native<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_CONF_DIR</span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_LIBEXEC_DIR</span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/libexec<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/lib/native:<span class="token variable">$JAVA_LIBRARY_PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_CONF_DIR</span><span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/etc/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_DATANODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_DATANODE_SECURE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_SECONDARYNAMENODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_NAMENODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">YARN_RESOURCEMANAGER_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">YARN_NODEMANAGER_USER</span><span class="token operator">=</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行<code>source /etc/profile</code>命令使环境变量生效</p><p>进入<code>/usr/local/hadoop/etc/hadoop</code>目录</p><p>在 hadoop-env.sh 文件末尾添加如下信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-8-openjdk-amd64<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_NAMENODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_DATANODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_SECONDARYNAMENODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">YARN_RESOURCEMANAGER_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">YARN_NODEMANAGER_USER</span><span class="token operator">=</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 core-site.xml中的configuration修改为如下内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.default.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hdfs://h01:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/home/hadoop3/hadoop/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 hdfs-site.xml中的configuration修改为如下内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/home/hadoop3/hadoop/hdfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/home/hadoop3/hadoop/hdfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 mapred-site.xml中的configuration修改为如下内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.application.classpath<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>            /usr/local/hadoop/etc/hadoop,            /usr/local/hadoop/share/hadoop/common/*,            /usr/local/hadoop/share/hadoop/common/lib/*,            /usr/local/hadoop/share/hadoop/hdfs/*,            /usr/local/hadoop/share/hadoop/hdfs/lib/*,            /usr/local/hadoop/share/hadoop/mapreduce/*,            /usr/local/hadoop/share/hadoop/mapreduce/lib/*,            /usr/local/hadoop/share/hadoop/yarn/*,            /usr/local/hadoop/share/hadoop/yarn/lib/*        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 yarn-site.xml中的configuration修改为如下内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>h01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 workers中的内容修改为如下内容</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">h01h02h03h04h05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此 hadoop就配置完成了</p><h2 id="使用docker配置集群"><a href="#使用docker配置集群" class="headerlink" title="使用docker配置集群"></a>使用docker配置集群</h2><p>将当前容器导出为镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">docker</span> commit <span class="token parameter variable">-a</span> <span class="token string">"chenshone"</span> <span class="token parameter variable">-m</span> <span class="token string">"hadoop setting image"</span> 1cfa hadoop_server:1.0sha256:992587967c3a7dfe01db7034e4ed5c50d2b2350d957f090d15f8ec654a6021a0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看当前有哪些镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">docker</span> imagesREPOSITORY      TAG       IMAGE ID       CREATED              SIZEhadoop_server   <span class="token number">1.0</span>       992587967c3a   About a minute ago   <span class="token number">2</span>.29GBubuntu          <span class="token number">16.04</span>     b6f507652425   <span class="token number">13</span> months ago        135MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动5个终端来配置集群</p><p>用刚刚导出的image构建5个容器，将它们都加入到最开始创建的名为<code>hadoop</code>的虚拟网络中，并将其主机名分别修改为<code>h01</code>、<code>h02</code>、<code>h03</code>、<code>h04</code>、<code>h05</code>。</p><p>其中<code>h01</code>作为master节点，需要暴露端口以供外界访问。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run  <span class="token parameter variable">-it</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>hadoop <span class="token parameter variable">-h</span> h01 <span class="token parameter variable">--name</span><span class="token operator">=</span>h01 <span class="token parameter variable">-p</span> <span class="token number">9870</span>:9870 <span class="token parameter variable">-p</span> <span class="token number">8088</span>:8088 hadoop_server:1.0 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他四个节点只需内部直接相互访问，无需向外暴露端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">docker</span> run  <span class="token parameter variable">-it</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>hadoop <span class="token parameter variable">-h</span> h02 <span class="token parameter variable">--name</span><span class="token operator">=</span>h02 hadoop_server:1.0 /bin/bash❯ <span class="token function">docker</span> run  <span class="token parameter variable">-it</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>hadoop <span class="token parameter variable">-h</span> h03 <span class="token parameter variable">--name</span><span class="token operator">=</span>h03 hadoop_server:1.0 /bin/bash❯ <span class="token function">docker</span> run  <span class="token parameter variable">-it</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>hadoop <span class="token parameter variable">-h</span> h04 <span class="token parameter variable">--name</span><span class="token operator">=</span>h04 hadoop_server:1.0 /bin/bash❯ <span class="token function">docker</span> run  <span class="token parameter variable">-it</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>hadoop <span class="token parameter variable">-h</span> h05 <span class="token parameter variable">--name</span><span class="token operator">=</span>h05 hadoop_server:1.0 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在h01中启动集群</p><p>先进行格式化操作（不格式化的话，hdfs可能起不来）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/<span class="token comment"># /usr/local/hadoop/bin/hadoop namenode -format</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/<span class="token comment"># /usr/local/hadoop/sbin/start-all.sh</span>Starting namenodes on <span class="token punctuation">[</span>h01<span class="token punctuation">]</span>h01: Warning: Permanently added <span class="token string">'h01,172.18.0.2'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts.Starting datanodesh04: Warning: Permanently added <span class="token string">'h04,172.18.0.5'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts.h05: Warning: Permanently added <span class="token string">'h05,172.18.0.6'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts.h02: Warning: Permanently added <span class="token string">'h02,172.18.0.3'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts.h03: Warning: Permanently added <span class="token string">'h03,172.18.0.4'</span> <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span> to the list of known hosts.h05: WARNING: /usr/local/hadoop/logs does not exist. Creating.h04: WARNING: /usr/local/hadoop/logs does not exist. Creating.h02: WARNING: /usr/local/hadoop/logs does not exist. Creating.h03: WARNING: /usr/local/hadoop/logs does not exist. Creating.Starting secondary namenodes <span class="token punctuation">[</span>h01<span class="token punctuation">]</span>Starting resourcemanagerStarting nodemanagers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在浏览器中访问<code>localhost:8088</code>和<code>localhost:9870</code>即可查看监控信息</p><p>使用如下命令即可查看分布式文件系统状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/<span class="token comment"># cd /usr/local/hadoop/bin/</span>root@h01:/usr/local/hadoop/bin<span class="token comment"># ./hadoop dfsadmin -report</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，hadoop集群就构建好了。</p><h3 id="WordCount例子"><a href="#WordCount例子" class="headerlink" title="WordCount例子"></a>WordCount例子</h3><p>集群构建好之后，可以试着跑一下WordCount的例子。</p><p>我们可以选择 <code>LICENSE.txt</code> 作为需要统计的文件</p><p>可以先看一下该文件的大小</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/hadoop<span class="token comment"># cat LICENSE.txt | wc</span>   <span class="token number">2814</span>   <span class="token number">21903</span>  <span class="token number">150571</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以发现，该文件有2814行，21903个单词，数据量还是很大的。</p><p>然后将其内容写入到 <code>file1.txt</code> 中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/hadoop<span class="token comment"># cat LICENSE.txt &gt; file1.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在HDFS中创建input文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/hadoop/bin<span class="token comment"># ./hadoop fs -mkdir /input</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将刚刚创建的<code>file1.txt</code>上传到HDFS中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/hadoop/bin<span class="token comment"># ./hadoop fs -put ../file1.txt /input</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查<code>file1.txt</code>是否上传成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/hadoop/bin<span class="token comment"># ./hadoop fs -ls /input</span>Found <span class="token number">1</span> items-rw-r--r--   <span class="token number">2</span> root supergroup     <span class="token number">150571</span> <span class="token number">2022</span>-09-26 06:29 /input/file1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行 wordcount 例子程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/hadoop/bin<span class="token comment"># ./hadoop jar ../share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.3.jar wordcount /input /output</span><span class="token number">2022</span>-09-26 06:33:06,459 INFO client.RMProxy: Connecting to ResourceManager at h01/172.18.0.2:8032<span class="token number">2022</span>-09-26 06:33:06,877 INFO mapreduce.JobResourceUploader: Disabling Erasure Coding <span class="token keyword">for</span> path: /tmp/hadoop-yarn/staging/root/.staging/job_1664172811516_0001<span class="token number">2022</span>-09-26 06:33:07,334 INFO input.FileInputFormat: Total input files to process <span class="token builtin class-name">:</span> <span class="token number">1</span><span class="token number">2022</span>-09-26 06:33:07,804 INFO mapreduce.JobSubmitter: number of splits:1<span class="token number">2022</span>-09-26 06:33:07,936 INFO mapreduce.JobSubmitter: Submitting tokens <span class="token keyword">for</span> job: job_1664172811516_0001<span class="token number">2022</span>-09-26 06:33:07,938 INFO mapreduce.JobSubmitter: Executing with tokens: <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token number">2022</span>-09-26 06:33:08,104 INFO conf.Configuration: resource-types.xml not found<span class="token number">2022</span>-09-26 06:33:08,105 INFO resource.ResourceUtils: Unable to <span class="token function">find</span> <span class="token string">'resource-types.xml'</span><span class="token builtin class-name">.</span><span class="token number">2022</span>-09-26 06:33:08,519 INFO impl.YarnClientImpl: Submitted application application_1664172811516_0001<span class="token number">2022</span>-09-26 06:33:08,557 INFO mapreduce.Job: The url to track the job: http://h01:8088/proxy/application_1664172811516_0001/<span class="token number">2022</span>-09-26 06:33:08,558 INFO mapreduce.Job: Running job: job_1664172811516_0001<span class="token number">2022</span>-09-26 06:33:15,645 INFO mapreduce.Job: Job job_1664172811516_0001 running <span class="token keyword">in</span> uber mode <span class="token builtin class-name">:</span> <span class="token boolean">false</span><span class="token number">2022</span>-09-26 06:33:15,646 INFO mapreduce.Job:  map <span class="token number">0</span>% reduce <span class="token number">0</span>%<span class="token number">2022</span>-09-26 06:33:20,701 INFO mapreduce.Job:  map <span class="token number">100</span>% reduce <span class="token number">0</span>%<span class="token number">2022</span>-09-26 06:33:27,875 INFO mapreduce.Job:  map <span class="token number">100</span>% reduce <span class="token number">100</span>%<span class="token number">2022</span>-09-26 06:33:27,892 INFO mapreduce.Job: Job job_1664172811516_0001 completed successfully<span class="token number">2022</span>-09-26 06:33:27,980 INFO mapreduce.Job: Counters: <span class="token number">54</span>        File System Counters                FILE: Number of bytes <span class="token assign-left variable">read</span><span class="token operator">=</span><span class="token number">46854</span>                FILE: Number of bytes <span class="token assign-left variable">written</span><span class="token operator">=</span><span class="token number">567357</span>                FILE: Number of <span class="token builtin class-name">read</span> <span class="token assign-left variable">operations</span><span class="token operator">=</span><span class="token number">0</span>                FILE: Number of large <span class="token builtin class-name">read</span> <span class="token assign-left variable">operations</span><span class="token operator">=</span><span class="token number">0</span>                FILE: Number of <span class="token function">write</span> <span class="token assign-left variable">operations</span><span class="token operator">=</span><span class="token number">0</span>                HDFS: Number of bytes <span class="token assign-left variable">read</span><span class="token operator">=</span><span class="token number">150667</span>                HDFS: Number of bytes <span class="token assign-left variable">written</span><span class="token operator">=</span><span class="token number">35326</span>                HDFS: Number of <span class="token builtin class-name">read</span> <span class="token assign-left variable">operations</span><span class="token operator">=</span><span class="token number">8</span>                HDFS: Number of large <span class="token builtin class-name">read</span> <span class="token assign-left variable">operations</span><span class="token operator">=</span><span class="token number">0</span>                HDFS: Number of <span class="token function">write</span> <span class="token assign-left variable">operations</span><span class="token operator">=</span><span class="token number">2</span>                HDFS: Number of bytes <span class="token builtin class-name">read</span> erasure-coded<span class="token operator">=</span><span class="token number">0</span>        Job Counters                Launched map <span class="token assign-left variable">tasks</span><span class="token operator">=</span><span class="token number">1</span>                Launched reduce <span class="token assign-left variable">tasks</span><span class="token operator">=</span><span class="token number">1</span>                Rack-local map <span class="token assign-left variable">tasks</span><span class="token operator">=</span><span class="token number">1</span>                Total <span class="token function">time</span> spent by all maps <span class="token keyword">in</span> occupied slots <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">3026</span>                Total <span class="token function">time</span> spent by all reduces <span class="token keyword">in</span> occupied slots <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">3726</span>                Total <span class="token function">time</span> spent by all map tasks <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">3026</span>                Total <span class="token function">time</span> spent by all reduce tasks <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">3726</span>                Total vcore-milliseconds taken by all map <span class="token assign-left variable">tasks</span><span class="token operator">=</span><span class="token number">3026</span>                Total vcore-milliseconds taken by all reduce <span class="token assign-left variable">tasks</span><span class="token operator">=</span><span class="token number">3726</span>                Total megabyte-milliseconds taken by all map <span class="token assign-left variable">tasks</span><span class="token operator">=</span><span class="token number">3098624</span>                Total megabyte-milliseconds taken by all reduce <span class="token assign-left variable">tasks</span><span class="token operator">=</span><span class="token number">3815424</span>        Map-Reduce Framework                Map input <span class="token assign-left variable">records</span><span class="token operator">=</span><span class="token number">2814</span>                Map output <span class="token assign-left variable">records</span><span class="token operator">=</span><span class="token number">21904</span>                Map output <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">234037</span>                Map output materialized <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">46854</span>                Input <span class="token function">split</span> <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">96</span>                Combine input <span class="token assign-left variable">records</span><span class="token operator">=</span><span class="token number">21904</span>                Combine output <span class="token assign-left variable">records</span><span class="token operator">=</span><span class="token number">2981</span>                Reduce input <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">2981</span>                Reduce shuffle <span class="token assign-left variable">bytes</span><span class="token operator">=</span><span class="token number">46854</span>                Reduce input <span class="token assign-left variable">records</span><span class="token operator">=</span><span class="token number">2981</span>                Reduce output <span class="token assign-left variable">records</span><span class="token operator">=</span><span class="token number">2981</span>                Spilled <span class="token assign-left variable">Records</span><span class="token operator">=</span><span class="token number">5962</span>                Shuffled Maps <span class="token operator">=</span><span class="token number">1</span>                Failed <span class="token assign-left variable">Shuffles</span><span class="token operator">=</span><span class="token number">0</span>                Merged Map <span class="token assign-left variable">outputs</span><span class="token operator">=</span><span class="token number">1</span>                GC <span class="token function">time</span> elapsed <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">91</span>                CPU <span class="token function">time</span> spent <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1550</span>                Physical memory <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span> <span class="token assign-left variable">snapshot</span><span class="token operator">=</span><span class="token number">480907264</span>                Virtual memory <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span> <span class="token assign-left variable">snapshot</span><span class="token operator">=</span><span class="token number">5207310336</span>                Total committed heap usage <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">387448832</span>                Peak Map Physical memory <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">311922688</span>                Peak Map Virtual memory <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2603814912</span>                Peak Reduce Physical memory <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">168984576</span>                Peak Reduce Virtual memory <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2603495424</span>        Shuffle Errors                <span class="token assign-left variable">BAD_ID</span><span class="token operator">=</span><span class="token number">0</span>                <span class="token assign-left variable">CONNECTION</span><span class="token operator">=</span><span class="token number">0</span>                <span class="token assign-left variable">IO_ERROR</span><span class="token operator">=</span><span class="token number">0</span>                <span class="token assign-left variable">WRONG_LENGTH</span><span class="token operator">=</span><span class="token number">0</span>                <span class="token assign-left variable">WRONG_MAP</span><span class="token operator">=</span><span class="token number">0</span>                <span class="token assign-left variable">WRONG_REDUCE</span><span class="token operator">=</span><span class="token number">0</span>        File Input Format Counters                Bytes <span class="token assign-left variable">Read</span><span class="token operator">=</span><span class="token number">150571</span>        File Output Format Counters                Bytes <span class="token assign-left variable">Written</span><span class="token operator">=</span><span class="token number">35326</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看HDFS的output文件中的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/hadoop/bin<span class="token comment"># ./hadoop fs -ls /output</span>Found <span class="token number">2</span> items-rw-r--r--   <span class="token number">2</span> root supergroup          <span class="token number">0</span> <span class="token number">2022</span>-09-26 06:33 /output/_SUCCESS-rw-r--r--   <span class="token number">2</span> root supergroup      <span class="token number">35326</span> <span class="token number">2022</span>-09-26 06:33 /output/part-r-00000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看下<code>part-r-00000</code>的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/hadoop/bin<span class="token comment"># ./hadoop fs -cat /output/part-r-00000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Hbase的安装与配置"><a href="#Hbase的安装与配置" class="headerlink" title="Hbase的安装与配置"></a>Hbase的安装与配置</h2><p>下载Hbase</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://archive.apache.org/dist/hbase/2.3.7/hbase-2.3.7-bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压到<code>/usr/local/</code>文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:~<span class="token comment"># tar -zxvf hbase-2.3.7-bin.tar.gz -C /usr/local/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置下环境变量，将如下内容添加到<code>/etc/profile</code>中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#hbase</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HBASE_HOME</span><span class="token operator">=</span>/usr/local/hbase-2.3.7<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HBASE_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使新配置的环境变量生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local<span class="token comment"># source /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时，其余四个节点都需要在其各自的<code>/etc/profile</code>中添加上面的内容</p><p>使用ssh（或者打开四个终端）进入到其余四个节点，然后依次修改即可。</p><p>进入<code>/usr/local/hbase-2.3.7/conf</code>文件下修改相应文件</p><p>在<code>hbase-env.sh</code>中加入如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-8-openjdk-amd64<span class="token builtin class-name">export</span> <span class="token assign-left variable">HBASE_MANAGES_ZK</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在<code>hbase-site.xml</code>中将configuration修改为如下内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hdfs://h01:9000/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hbase.master<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>h01:60000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>h01,h02,h03,h04,h05<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hbase.zookeeper.property.dataDir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/home/hadoop/zoodata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>regionservers</code>修改为如下内容</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">h01h02h03h04h05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>scp</code> 命令将配置好的 Hbase 复制到其他 4 个容器中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:~<span class="token comment"># scp -r /usr/local/hbase-2.3.7 root@h02:/usr/local/</span>root@h01:~<span class="token comment"># scp -r /usr/local/hbase-2.3.7 root@h03:/usr/local/</span>root@h01:~<span class="token comment"># scp -r /usr/local/hbase-2.3.7 root@h04:/usr/local/</span>root@h01:~<span class="token comment"># scp -r /usr/local/hbase-2.3.7 root@h05:/usr/local/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动hbase</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/hbase-2.3.7/bin<span class="token comment"># start-hbase.sh</span>SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/usr/local/hbase-2.3.7/lib/client-facing-thirdparty/slf4j-log4j12-1.7.30.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: See http://www.slf4j.org/codes.html<span class="token comment">#multiple_bindings for an explanation.</span>SLF4J: Actual binding is of <span class="token builtin class-name">type</span> <span class="token punctuation">[</span>org.slf4j.impl.Log4jLoggerFactory<span class="token punctuation">]</span>SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/usr/local/hbase-2.3.7/lib/client-facing-thirdparty/slf4j-log4j12-1.7.30.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: See http://www.slf4j.org/codes.html<span class="token comment">#multiple_bindings for an explanation.</span>SLF4J: Actual binding is of <span class="token builtin class-name">type</span> <span class="token punctuation">[</span>org.slf4j.impl.Log4jLoggerFactory<span class="token punctuation">]</span>h03: running zookeeper, logging to /usr/local/hbase-2.3.7/bin/<span class="token punctuation">..</span>/logs/hbase-root-zookeeper-h03.outh01: running zookeeper, logging to /usr/local/hbase-2.3.7/bin/<span class="token punctuation">..</span>/logs/hbase-root-zookeeper-h01.outh02: running zookeeper, logging to /usr/local/hbase-2.3.7/bin/<span class="token punctuation">..</span>/logs/hbase-root-zookeeper-h02.outh04: running zookeeper, logging to /usr/local/hbase-2.3.7/bin/<span class="token punctuation">..</span>/logs/hbase-root-zookeeper-h04.outh05: running zookeeper, logging to /usr/local/hbase-2.3.7/bin/<span class="token punctuation">..</span>/logs/hbase-root-zookeeper-h05.outrunning master, logging to /usr/local/hbase-2.3.7/logs/hbase--master-h01.outh05: running regionserver, logging to /usr/local/hbase-2.3.7/bin/<span class="token punctuation">..</span>/logs/hbase-root-regionserver-h05.outh01: running regionserver, logging to /usr/local/hbase-2.3.7/bin/<span class="token punctuation">..</span>/logs/hbase-root-regionserver-h01.outh04: running regionserver, logging to /usr/local/hbase-2.3.7/bin/<span class="token punctuation">..</span>/logs/hbase-root-regionserver-h04.outh03: running regionserver, logging to /usr/local/hbase-2.3.7/bin/<span class="token punctuation">..</span>/logs/hbase-root-regionserver-h03.outh02: running regionserver, logging to /usr/local/hbase-2.3.7/bin/<span class="token punctuation">..</span>/logs/hbase-root-regionserver-h02.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开hbase的shell，并做一下测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/hbase-2.3.7/bin<span class="token comment"># hbase shell</span>SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/usr/local/hbase-2.3.7/lib/client-facing-thirdparty/slf4j-log4j12-1.7.30.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: See http://www.slf4j.org/codes.html<span class="token comment">#multiple_bindings for an explanation.</span>SLF4J: Actual binding is of <span class="token builtin class-name">type</span> <span class="token punctuation">[</span>org.slf4j.impl.Log4jLoggerFactory<span class="token punctuation">]</span>HBase ShellUse <span class="token string">"help"</span> to get list of supported commands.Use <span class="token string">"exit"</span> to quit this interactive shell.For Reference, please visit: http://hbase.apache.org/2.0/book.html<span class="token comment">#shell</span>Version <span class="token number">2.3</span>.7, r8b2f5141e900c851a2b351fccd54b13bcac5e2ed, Tue Oct <span class="token number">12</span> <span class="token number">16</span>:38:55 UTC <span class="token number">2021</span>Took <span class="token number">0.0008</span> secondshbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:001:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:002:0*hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:003:0* <span class="token function">whoami</span>root <span class="token punctuation">(</span>auth:SIMPLE<span class="token punctuation">)</span>    groups: rootTook <span class="token number">0.0243</span> secondshbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:004:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> create <span class="token string">'member'</span>,<span class="token string">'id'</span>,<span class="token string">'address'</span>,<span class="token string">'info'</span>Created table memberTook <span class="token number">1.7968</span> seconds<span class="token operator">=</span><span class="token operator">&gt;</span> Hbase::Table - memberhbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:005:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> put <span class="token string">'member'</span>, <span class="token string">'debugo'</span>,<span class="token string">'id'</span>,<span class="token string">'11'</span>Took <span class="token number">0.1932</span> secondshbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:006:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> put <span class="token string">'member'</span>, <span class="token string">'debugo'</span>,<span class="token string">'info:age'</span>,<span class="token string">'27'</span>Took <span class="token number">0.0074</span> secondshbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:007:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> count <span class="token string">'member'</span><span class="token number">1</span> row<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Took <span class="token number">0.0709</span> seconds<span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1</span>hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:008:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="spark的安装与配置"><a href="#spark的安装与配置" class="headerlink" title="spark的安装与配置"></a>spark的安装与配置</h2><p>下载spark压缩包到本地</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://archive.apache.org/dist/spark/spark-2.4.8/spark-2.4.8-bin-hadoop2.7.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其解压到 <code>/usr/local</code> 目录下面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:~<span class="token comment"># tar -zxvf spark-2.4.8-bin-hadoop2.7.tgz -C /usr/local/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入<code>/usr/local/</code>文件夹，将刚刚解压的文件夹改个名字</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local<span class="token comment"># mv spark-2.4.8-bin-hadoop2.7/ spark-2.4.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将如下内容加入到环境变量中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#spark</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SPARK_HOME</span><span class="token operator">=</span>/usr/local/spark-2.4.8<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$SPARK_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行如下命令使得刚刚配置的环境变量生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样的，将其他四个节点也添加如上的环境变量</p><p>在<code>/usr/local/spark-2.4.8/conf</code>目录中修改配置</p><p>修改文件名</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> spark-env.sh.template spark-env.sh<span class="token function">mv</span> slaves.template slaves<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在<code>spark-env.sh</code>文件中添加如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-8-openjdk-amd64<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/usr/local/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_CONF_DIR</span><span class="token operator">=</span>/usr/local/hadoop/etc/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable">SCALA_HOME</span><span class="token operator">=</span>/usr/share/scala<span class="token builtin class-name">export</span> <span class="token assign-left variable">SPARK_MASTER_HOST</span><span class="token operator">=</span>h01<span class="token builtin class-name">export</span> <span class="token assign-left variable">SPARK_MASTER_IP</span><span class="token operator">=</span>h01<span class="token builtin class-name">export</span> <span class="token assign-left variable">SPARK_WORKER_MEMORY</span><span class="token operator">=</span>4g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>slaves</code>的内容修改为如下内容</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">h01h02h03h04h05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将配置好的spark使用<code>scp</code>命令上传到其他四个节点中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> /usr/local/spark-2.4.8 root@h02:/usr/local/<span class="token function">scp</span> <span class="token parameter variable">-r</span> /usr/local/spark-2.4.8 root@h03:/usr/local/<span class="token function">scp</span> <span class="token parameter variable">-r</span> /usr/local/spark-2.4.8 root@h04:/usr/local/<span class="token function">scp</span> <span class="token parameter variable">-r</span> /usr/local/spark-2.4.8 root@h05:/usr/local/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动spark</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/spark-2.4.8/sbin<span class="token comment"># start-all.sh</span>Starting namenodes on <span class="token punctuation">[</span>h01<span class="token punctuation">]</span>Starting datanodesStarting secondary namenodes <span class="token punctuation">[</span>h01<span class="token punctuation">]</span>Starting resourcemanagerStarting nodemanagers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入spark shell交互界面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@h01:/usr/local/spark-2.4.8/bin<span class="token comment"># spark-shell</span><span class="token number">2022</span>-09-26 09:59:32,002 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="token keyword">for</span> your platform<span class="token punctuation">..</span>. using builtin-java classes where applicableSetting default log level to <span class="token string">"WARN"</span><span class="token builtin class-name">.</span>To adjust logging level use sc.setLogLevel<span class="token punctuation">(</span>newLevel<span class="token punctuation">)</span>. For SparkR, use setLogLevel<span class="token punctuation">(</span>newLevel<span class="token punctuation">)</span>.Spark context Web UI available at http://h01:4040Spark context available as <span class="token string">'sc'</span> <span class="token punctuation">(</span>master <span class="token operator">=</span> local<span class="token punctuation">[</span>*<span class="token punctuation">]</span>, app <span class="token function">id</span> <span class="token operator">=</span> local-1664186379024<span class="token punctuation">)</span>.Spark session available as <span class="token string">'spark'</span><span class="token builtin class-name">.</span>Welcome to      ____              __     / __/__  ___ _____/ /__    _<span class="token punctuation">\</span> <span class="token punctuation">\</span>/ _ <span class="token punctuation">\</span>/ _ `/ __/  '_/   /___/ .__/<span class="token punctuation">\</span>_,_/_/ /_/<span class="token punctuation">\</span>_<span class="token punctuation">\</span>   version <span class="token number">2.4</span>.8      /_/Using Scala version <span class="token number">2.11</span>.12 <span class="token punctuation">(</span>OpenJDK <span class="token number">64</span>-Bit Server VM, Java <span class="token number">1.8</span>.0_292<span class="token punctuation">)</span>Type <span class="token keyword">in</span> expressions to have them evaluated.Type :help <span class="token keyword">for</span> <span class="token function">more</span> information.scala<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑一个小demo测试一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scala<span class="token operator">&gt;</span> val <span class="token function">file</span> <span class="token operator">=</span> sc.textFile<span class="token punctuation">(</span><span class="token string">"/input/file1.txt"</span><span class="token punctuation">)</span>file: org.apache.spark.rdd.RDD<span class="token punctuation">[</span>String<span class="token punctuation">]</span> <span class="token operator">=</span> /input/file1.txt MapPartitionsRDD<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> at textFile at <span class="token operator">&lt;</span>console<span class="token operator">&gt;</span>:24scala<span class="token operator">&gt;</span> val count <span class="token operator">=</span> file.flatMap<span class="token punctuation">(</span>line<span class="token operator">=</span><span class="token operator">&gt;</span>line.split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">))</span>.map<span class="token punctuation">(</span>word<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>word,1<span class="token punctuation">))</span>.reduceByKey<span class="token punctuation">((</span>a,b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span>a+b<span class="token punctuation">)</span>count: org.apache.spark.rdd.RDD<span class="token punctuation">[</span><span class="token punctuation">(</span>String, Int<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ShuffledRDD<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> at reduceByKey at <span class="token operator">&lt;</span>console<span class="token operator">&gt;</span>:25scala<span class="token operator">&gt;</span> count.collect<span class="token punctuation">(</span><span class="token punctuation">)</span>res0: Array<span class="token punctuation">[</span><span class="token punctuation">(</span>String, Int<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">((</span>Unless,5<span class="token punctuation">)</span>, <span class="token punctuation">(</span>works,,4<span class="token punctuation">)</span>, <span class="token punctuation">(</span>order,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>MERCHANTABILITY,,10<span class="token punctuation">)</span>, <span class="token punctuation">(</span>Warranties,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>been,8<span class="token punctuation">)</span>, <span class="token punctuation">(</span>infringement.,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>users,,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>appropriateness,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>appears,,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>Corporation,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>offering,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>file,24<span class="token punctuation">)</span>, <span class="token punctuation">(</span>map,,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>payment,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>agreement,,4<span class="token punctuation">)</span>, <span class="token punctuation">(</span>responsibilities,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>are,91<span class="token punctuation">)</span>, <span class="token punctuation">(</span>Version.,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">2</span>.,11<span class="token punctuation">)</span>, <span class="token punctuation">((</span>a<span class="token punctuation">)</span>?rename,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>reproduction,,4<span class="token punctuation">)</span>, <span class="token punctuation">(</span>consists,3<span class="token punctuation">)</span>, <span class="token punctuation">(</span>IS,43<span class="token punctuation">)</span>, <span class="token punctuation">(</span>grant,10<span class="token punctuation">)</span>, <span class="token punctuation">(</span>DATA,,16<span class="token punctuation">)</span>, <span class="token punctuation">(</span>offer.,4<span class="token punctuation">)</span>, <span class="token punctuation">(</span>nature<span class="token punctuation">;</span>,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>Under,3<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">"[]"</span>,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>General,3<span class="token punctuation">)</span>, <span class="token punctuation">(</span>SESAC<span class="token punctuation">)</span>,,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>entirety,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>contributors,12<span class="token punctuation">)</span>, <span class="token punctuation">(</span>B.,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>JLine,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">"printed,1), ("</span>COPYRIGHTS,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>synchronization,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token number">1.9</span>.,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>chosen,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>relating,5<span class="token punctuation">)</span>, <span class="token punctuation">(</span>technically,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>initiation,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>US,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>EXTENT,5<span class="token punctuation">)</span>, <span class="token punctuation">(</span>Contribution.,4<span class="token punctuation">)</span>, <span class="token punctuation">(</span>org.apache.hadoop.util.bloom.*,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>i<span class="token punctuation">)</span>,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>?Covered,2<span class="token punctuation">)</span>, <span class="token punctuation">(</span>conclusions,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>Authors,1<span class="token punctuation">)</span>, <span class="token punctuation">(</span>associated,<span class="token punctuation">..</span>.scala<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> util </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在gin中使用jwt鉴权</title>
      <link href="/2023/02/02/be/go/jwt/"/>
      <url>/2023/02/02/be/go/jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="jwt是什么"><a href="#jwt是什么" class="headerlink" title="jwt是什么"></a>jwt是什么</h2><p>jwt全称 JSON Web Token，是一种跨域认证的解决方案。</p><p>jwt由三部分组成，中间使用<code>.</code>进行分割，格式如下：</p><blockquote><p>header.payload.signature</p></blockquote><ul><li>header: 是一个JSON对象，包含如下内容<pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "typ": "JWT",//默认为JWT  "alg": "HS256"//支持多种加密算法}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>payload: 也是一个JSON对象，用来存放实际所需的数据。包括如下JWT标准提供的7种可选数据和自定义数据</li></ul><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>iss</td><td>签发者</td></tr><tr><td>sub</td><td>主题,用于鉴别一个用户</td></tr><tr><td>exp</td><td>过期时间</td></tr><tr><td>aud</td><td>受众</td></tr><tr><td>iat</td><td>签发时间</td></tr><tr><td>nbf</td><td>生效时间</td></tr><tr><td>jti</td><td>jwt ID</td></tr></tbody></table><ul><li>signature: 签名，将header和payload进行Base64URL编码后，再用指定密钥和header中的加密算法进行加密得到</li></ul><h3 id="jwt的特点"><a href="#jwt的特点" class="headerlink" title="jwt的特点"></a>jwt的特点</h3><p>相较于传统的Cookie和Session的认证方式，jwt不需要像Session那样在服务器上存储信息，也没有Cookie的大小限制，更加灵活，也更适用于分布式系统。</p><h2 id="在gin中使用jwt"><a href="#在gin中使用jwt" class="headerlink" title="在gin中使用jwt"></a>在gin中使用jwt</h2><p>使用<code>jwt-go</code>包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/golang-jwt/jwt/v4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"github.com/golang-jwt/jwt/v4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="token生成函数和解析函数"><a href="#token生成函数和解析函数" class="headerlink" title="token生成函数和解析函数"></a>token生成函数和解析函数</h3><p>在样例中，我们在payload中存储用户id，读者可根据自己需要添加任意信息。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> util<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"errors"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token string">"log"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token comment">// MyClaims 自定义的payload</span><span class="token keyword">type</span> MyClaims <span class="token keyword">struct</span> <span class="token punctuation">{</span>jwt<span class="token punctuation">.</span>RegisteredClaims        <span class="token comment">// 内置的payload字段</span>UserID               <span class="token builtin">string</span> <span class="token string">`json:"user_id"`</span> <span class="token comment">// 自定义的payload字段</span><span class="token punctuation">}</span><span class="token keyword">type</span> JWT <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"qwouidfoqiwr23fioqw"</span><span class="token punctuation">)</span> <span class="token comment">// 用于签名的密钥</span><span class="token keyword">func</span> <span class="token punctuation">(</span>j <span class="token operator">*</span>JWT<span class="token punctuation">)</span> <span class="token function">GenerateToken</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">,</span> ttl <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 创建一个新的token</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> <span class="token operator">&amp;</span>MyClaims<span class="token punctuation">{</span>UserID<span class="token punctuation">:</span> msg<span class="token punctuation">,</span>RegisteredClaims<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span>RegisteredClaims<span class="token punctuation">{</span>ExpiresAt<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span>ttl<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 过期时间，ttl天后过期</span>IssuedAt<span class="token punctuation">:</span>  jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>                                        <span class="token comment">// 签发时间</span>NotBefore<span class="token punctuation">:</span> jwt<span class="token punctuation">.</span><span class="token function">NewNumericDate</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>                                        <span class="token comment">// 生效时间</span>Issuer<span class="token punctuation">:</span>    <span class="token string">"tiktok-lite"</span><span class="token punctuation">,</span>                                                  <span class="token comment">// 签发人</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>tokenString<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// 签名, 返回token字符串</span><span class="token keyword">return</span> tokenString<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>j <span class="token operator">*</span>JWT<span class="token punctuation">)</span> <span class="token function">ParseToken</span><span class="token punctuation">(</span>tokenString <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>token<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseWithClaims</span><span class="token punctuation">(</span>tokenString<span class="token punctuation">,</span> <span class="token operator">&amp;</span>MyClaims<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>token <span class="token operator">*</span>jwt<span class="token punctuation">.</span>Token<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> key<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"invalid token"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>claims<span class="token punctuation">,</span> ok <span class="token operator">:=</span> token<span class="token punctuation">.</span>Claims<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>MyClaims<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">||</span> <span class="token operator">!</span>token<span class="token punctuation">.</span>Valid <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"invalid token"</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"invalid token"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> claims<span class="token punctuation">.</span>UserID<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="gin中间件"><a href="#gin中间件" class="headerlink" title="gin中间件"></a>gin中间件</h3><p>构造一个jwt鉴权中间件，在需要用户鉴权的路由中使用。</p><p>一般token信息会放在请求的header的<code>Authorization</code>字段中，并以<code>Bearer +token字符串</code>的方式发送。本文采用URL参数的方式发送token，例如：<a href="http://domain.com/user/info?user_id=xxxxx&amp;token=xxxxxxx">http://domain.com/user/info?user_id=xxxxx&amp;token=xxxxxxx</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">JWTAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>userId <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span>token <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token keyword">if</span> userId <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> token <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>controller<span class="token punctuation">.</span>UserInfoRes<span class="token punctuation">{</span>Code<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>Msg<span class="token punctuation">:</span>  <span class="token string">"缺失参数"</span><span class="token punctuation">,</span>User<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>jwt <span class="token operator">:=</span> util<span class="token punctuation">.</span>JWT<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 上文实现的JWT</span>claims<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> claims <span class="token operator">!=</span> userId <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>controller<span class="token punctuation">.</span>UserInfoRes<span class="token punctuation">{</span>Code<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>Msg<span class="token punctuation">:</span>  <span class="token string">"token验证失败"</span><span class="token punctuation">,</span>User<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="login时生成token"><a href="#login时生成token" class="headerlink" title="login时生成token"></a>login时生成token</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Login</span><span class="token punctuation">(</span>username <span class="token builtin">string</span><span class="token punctuation">,</span> password <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>UserToken<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span>jwt <span class="token operator">:=</span> util<span class="token punctuation">.</span>JWT<span class="token punctuation">{</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">GenerateToken</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>UserToken<span class="token punctuation">{</span><span class="token operator">...</span>Token<span class="token punctuation">:</span> token<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">user <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">,</span> middleware<span class="token punctuation">.</span><span class="token function">JWTAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    userID <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span>    userInfo <span class="token operator">:=</span> controller<span class="token punctuation">.</span><span class="token function">GetUserInfo</span><span class="token punctuation">(</span>userID<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gin </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
